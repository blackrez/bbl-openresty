upstream backend {
	server 0.0.0.1;

    balancer_by_lua_block {

        -- use Lua to do something interesting here
        -- as a dynamic balancer
        local balancer = require "ngx.balancer"
        -- Warning you have to set an IP!
        local host = "172.17.0.1"
        local port = 8000

        if  ngx.var.uri == "/v1/code_postal/75000" then
            port = 8001
        end

        local ok, err = balancer.set_current_peer(host, port)
        if not ok then
            ngx.log(ngx.ERR, "failed to set the current peer: ", err)
            return ngx.exit(500)
        end

     }
}

lua_shared_dict my_limit_req_store 100m;

server {
	listen 8080;
    location /hello {
        default_type text/html;
        content_by_lua '
        	ngx.say("<p>hello, world</p>")
        ';
    }
    location / {

    	access_by_lua_block {

                local apikey = ngx.req.get_headers()["Api-key"]

                local limit_req = require "resty.limit.req"
                ngx.log(ngx.NOTICE, apikey)
                
                local limit = 100

                if apikey == "trucmuche" then
                    limit = 500
                end

                local lim, err = limit_req.new("my_limit_req_store", limit, 40)
                if not lim then
                    ngx.log(ngx.ERR,
                            "failed to instantiate a resty.limit.req object: ", err)
                    return ngx.exit(500)
                end

                -- the following call must be per-request.
                -- here we use the remote (IP) address as the limiting key
                local key = ngx.var.binary_remote_addr
                local delay, err = lim:incoming(key, true)
                if not delay then
                    if err == "rejected" then
                        return ngx.exit(503)
                    end
                    ngx.log(ngx.ERR, "failed to limit req: ", err)
                    return ngx.exit(500)
                end

                if delay >= 0.001 then
                    -- the 2nd return value holds the number of excess requests
                    -- per second for the specified key. for example, number 31
                    -- means the current request rate is at 231 req/sec for the
                    -- specified key.
                    local excess = err

                    -- the request exceeding the 200 req/sec but below 300 req/sec,
                    -- so we intentionally delay it here a bit to conform to the
                    -- 200 req/sec rate.
                    ngx.sleep(delay)
                end
            }
    	proxy_pass http://backend;
    }
}